BCValue genTemporary(BCType bct);
void Initialize();
void Finalize();
void beginFunction();
void endFunction();
BCValue genParameter(BCType bct);
BCAddr beginJmp();
void incSp();
StackAddr currSp();
void endJmp(BCAddr atIp, BCLabel target);
BCLabel genLabel();
CndJmpBegin beginCndJmp(BCValue cond = BCValue.init, bool ifTrue = false);
void endCndJmp(CndJmpBegin jmp, BCLabel target);
void genJump(BCLabel target);
void emitFlg(BCValue lhs);
void Alloc(BCValue heapPtr, BCValue size);
void AssertError(BCValue value, BCValue err);
void Not(BCValue result, BCValue val);
void Set(BCValue lhs, BCValue rhs);
void Lt3(BCValue result, BCValue lhs, BCValue rhs);
void Le3(BCValue result, BCValue lhs, BCValue rhs);
void Gt3(BCValue result, BCValue lhs, BCValue rhs);
void Ge3(BCValue result, BCValue lhs, BCValue rhs);
void Eq3(BCValue result, BCValue lhs, BCValue rhs);
void Neq3(BCValue result, BCValue lhs, BCValue rhs);
void Add3(BCValue result, BCValue lhs, BCValue rhs);
void Sub3(BCValue result, BCValue lhs, BCValue rhs);
void Mul3(BCValue result, BCValue lhs, BCValue rhs);
void Div3(BCValue result, BCValue lhs, BCValue rhs);
void And3(BCValue result, BCValue lhs, BCValue rhs);
void Or3(BCValue result, BCValue lhs, BCValue rhs);
void Xor3(BCValue result, BCValue lhs, BCValue rhs);
void Lsh3(BCValue result, BCValue lhs, BCValue rhs);
void Rsh3(BCValue result, BCValue lhs, BCValue rhs);
void Mod3(BCValue result, BCValue lhs, BCValue rhs);
void Call(BCValue result, BCValue fn, BCValue[] args);
void Load32(BCValue _to, BCValue from);
void Store32(BCValue _to, BCValue value);
void Byte3(BCValue result, BCValue word, BCValue idx);
void Ret(BCValue val);
void LoadIndexed(BCValue result, BCValue array, BCValue idx, BCValue arrayLength);
void Cat(BCValue result, const BCValue lhs, const BCValue rhs, const uint size);
